name: Build on Pull Request

on:
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      # Check out the repository code
      - name: Checkout code
        uses: actions/checkout@v3

      # Set up Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      # Install dependencies
      - name: Install dependencies
        run: npm install

      # Run the build script (make sure "build" is defined in your package.json)
      - name: Run build
        id: build
        env:
          ZE_SECRET_TOKEN: ${{ secrets.ZEPHYR_AUTH_TOKEN }}
        run: |
          OUTPUT=$(npm run build)
          echo "$OUTPUT"
          URL=$(echo "$OUTPUT" | grep -oE 'https://[^ ]+')
          HOST=$(echo "$OUTPUT" | grep -oP '(?<=ZEPHYR\s+)\S+(?=#)')
          
          echo "Extracted Host Zephyr URL: $URL"
          echo "Extracted Host: $HOST"
          echo "host=$HOST" >> "$GITHUB_OUTPUT"
          echo "url=$URL" >> "$GITHUB_OUTPUT"

      - name: Run build remote
        id: buildRemote
        env:
          ZE_SECRET_TOKEN: ${{ secrets.ZEPHYR_AUTH_TOKEN }}
        run: |
          OUTPUT=$(npm run build-remote)
          echo "$OUTPUT"
          REMOTE_URL=$(echo "$OUTPUT" | grep -oE 'https://[^ ]+')
          REMOTE=$(echo "$OUTPUT" | grep -oP '(?<=ZEPHYR\s+)\S+(?=#)')
          
          echo "Extracted Remote Zephyr URL: $REMOTE_URL"
          echo "Extracted Remote: $REMOTE"
          echo "remote=$REMOTE" >> "$GITHUB_OUTPUT"
          echo "remoteUrl=$REMOTE_URL" >> "$GITHUB_OUTPUT"

      - name: Run AI E2E tests with Puppeteer and Midscene
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          PAGE_URL: ${{ steps.build.outputs.url }}
          REMOTE_URL: ${{ steps.buildRemote.outputs.remoteUrl }}
          REMOTE: ${{ steps.buildRemote.outputs.remote }}
        run: npm run ai-e2e
      - name: Upload Midscene output
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: midscene-output
          path: midscene_run
